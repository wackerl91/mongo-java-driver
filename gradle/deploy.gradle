/*
 * Copyright 2008-present MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def deployedProjects = subprojects.findAll { !['util'].contains(it.name) }
configure(deployedProjects) {

    def isScala = project.name.contains('scala')
    def hasAllScalaVersions = project.hasProperty('allScalaVersions')
    def isInvalidScalaProject = isScala && !hasAllScalaVersions

    task publishSnapshots {
        group = 'publishing'
        description = 'Publishes snapshots to Sonatype'

        if ( version.endsWith('-SNAPSHOT')) {
            if (isInvalidScalaProject) {
                doFirst {
                    def cause = """
                    | Not publishing all Scala versions:
                    | =================================
                    |
                    | You must set the -PallScalaVersions flag when publishing
                    |""".stripMargin()
                        throw new GradleException(cause)
                }
            } else {
                dependsOn tasks.withType(PublishToMavenRepository)
            }
        }
    }

    task publishArchives {
        group = 'publishing'
        description = 'Publishes a release and uploads to Sonatype / Maven Central'

        def gitVersionMatch = project.gitVersion == version

        doFirst { 
            if (!gitVersionMatch) {
                def cause = """
                | Version mismatch:
                | =================
                |
                | $version != $gitVersion 
                |
                | The project version does not match the git tag.
                |""".stripMargin()
                throw new GradleException(cause)
            } else if (isInvalidScalaProject) {
                def cause = """
                    | Not publishing all Scala versions:
                    | =================================
                    |
                    | You must set the -PallScalaVersions flag when publishing
                    |""".stripMargin()
                throw new GradleException(cause)
            } else {
                println("Publishing: ${project.name} : ${project.gitVersion}")
            }
        }
        if (gitVersionMatch && !isInvalidScalaProject) {
            dependsOn tasks.withType(PublishToMavenRepository)
        }
    }
}
